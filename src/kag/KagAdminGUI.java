/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package kag;

import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author joe
 */
public class KagAdminGUI extends javax.swing.JFrame {

    private KagSocket Server = null;
    private boolean Connected = false;
    
    /**
     * Creates new form KagAdminGUI
     */
    public KagAdminGUI() {
        initComponents();

        DefaultCaret caret = (DefaultCaret)ConsoleLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HostBox = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        PasswordBox = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ConsoleLog = new javax.swing.JTextArea();
        CommandBox = new javax.swing.JTextField();
        CommandButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KAG Admin");
        setMinimumSize(new java.awt.Dimension(600, 400));

        HostBox.setToolTipText("IP:PORT");
        HostBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HostBoxActionPerformed(evt);
            }
        });

        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        PasswordBox.setToolTipText("Password");

        ConsoleLog.setEditable(false);
        ConsoleLog.setBackground(new java.awt.Color(0, 0, 0));
        ConsoleLog.setColumns(20);
        ConsoleLog.setFont(new java.awt.Font("Monaco", 0, 12)); // NOI18N
        ConsoleLog.setForeground(new java.awt.Color(204, 204, 204));
        ConsoleLog.setRows(5);
        jScrollPane1.setViewportView(ConsoleLog);

        CommandBox.setEditable(false);
        CommandBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommandBoxActionPerformed(evt);
            }
        });

        CommandButton.setText("Run");
        CommandButton.setEnabled(false);
        CommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommandButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Host:Port");

        jLabel2.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CommandBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CommandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HostBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PasswordBox, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConnectButton)
                        .addGap(0, 104, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HostBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConnectButton)
                    .addComponent(PasswordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CommandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(CommandBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HostBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HostBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HostBoxActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        
        if (ConnectButton.getText().equals("Disconnect")) {
            HandleDisonnect();
        }
        else if (ConnectButton.getText().equals("Connect")) {
            System.out.println("clicked connect");
            HandleConnect();
        }
    }
    
    private void HandleConnect() {
        String IpPort = HostBox.getText();
        String Password = new String(PasswordBox.getPassword());
        
        String Host = null;
        Integer Port = null;
        
        String parts[] = IpPort.split(":");
        
        if (parts.length < 2 || IpPort.length() == 0 || Password.length() == 0) {
            JOptionPane.showMessageDialog(this, "You must appropriately fill out the password fields",
                    "Incomplete input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Host = parts[0];
        
        try {
            Port = Integer.parseInt(parts[1]);
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Port does not look like a number",
                    "Incomplete input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (Port < 1 || Port > 65000) {
            JOptionPane.showMessageDialog(this, "Port is not within a realistic range",
                    "Incomplete input", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        System.out.println("passed checks");
        
        ConnectButton.setEnabled(false);
        
        Server = new KagSocket(this);
        
        Server.setDetails(Host, Password, Port);
        Server.execute();
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void CommandBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommandBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CommandBoxActionPerformed

    private void CommandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommandButtonActionPerformed
        
        String command = CommandBox.getText().trim();
        CommandBox.setText("");
        
        if (command.length() == 0 || !Connected || Server == null) {
            return;
        }
        
        Server.sendCommand(command);
    }//GEN-LAST:event_CommandButtonActionPerformed

    private void HandleDisonnect() {
        boolean success = Server.cancel(true);
        
        if (success)
            System.out.println("Cancelled worker");
        else
            System.out.println("Failed to cancel worker");
    }
    
    public void addConsoleLine(String line) {
        ConsoleLog.append(line+"\n");
    }
    
    public void onConnect() {
        ConnectButton.setText("Disconnect");
        HostBox.setEditable(false);
        PasswordBox.setEditable(false);
        CommandBox.setEditable(true);
        CommandButton.setEnabled(true);
        Connected = true;
        ConnectButton.setEnabled(true);
    }

    public void onDisconnect() {
        ConnectButton.setText("Connect");
        HostBox.setEditable(true);
        PasswordBox.setEditable(true);
        CommandBox.setEditable(false);
        CommandBox.setText("");
        CommandButton.setEnabled(false);
        Connected = false;
        ConnectButton.setEnabled(true);
        addConsoleLine("Disconnected..");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KagAdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KagAdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KagAdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KagAdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KagAdminGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CommandBox;
    private javax.swing.JButton CommandButton;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JTextArea ConsoleLog;
    private javax.swing.JTextField HostBox;
    private javax.swing.JPasswordField PasswordBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
